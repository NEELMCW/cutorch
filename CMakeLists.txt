CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

# HIP_PATH
IF(NOT DEFINED $ENV{HIP_PATH})
  SET(HIP_PATH /opt/rocm/hip)
ELSE()
  SET(HIP_PATH $ENV{HIP_PATH})
ENDIF()

# HIPBLAS_PATH
IF(NOT DEFINED $ENV{HIPBLAS_PATH})
  SET(HIPBLAS_PATH /opt/rocm/hipblas/)
ELSE()
  SET(HIPBLAS_PATH $ENV{HIPBLAS_PATH})
ENDIF()

# HIPRAND_PATH
IF(NOT DEFINED $ENV{HIPRAND_PATH})
  SET(HIPRAND_PATH /opt/rocm/hiprand/)
ELSE()
  SET(HIPRAND_PATH $ENV{HIPRAND_PATH})
ENDIF()

# HIPSPARSE_PATH
IF(NOT DEFINED $ENV{HIPSPARSE_PATH})
   SET(HIPSPARSE_PATH /opt/rocm/hcsparse/)
ELSE()
   SET(HIPSPARSE_PATH $ENV{HIPSPARSE_PATH})
ENDIF()
    


SET(CMAKE_MODULE_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_CURRENT_SOURCE_DIR}/lib/THC/cmake ${CMAKE_MODULE_PATH} "${HIP_PATH}/cmake")

EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig -P OUTPUT_VARIABLE PLATFORM)

include(HipTorchWrap)

FIND_PACKAGE(Torch REQUIRED)
FIND_PACKAGE(HIP 1.4 REQUIRED)

IF(${PLATFORM} STREQUAL "nvcc")
  FIND_PACKAGE(MAGMA)
ENDIF()

# Obtain HIP Compile flags
EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig --cpp_config OUTPUT_VARIABLE HIP_CXX_FLAGS)

# set HIPCC as default CXX compiler
SET(CMAKE_CXX_COMPILER ${HIP_HIPCC_EXECUTABLE})




IF (NOT WIN32)
    #SET(CMAKE_C_FLAGS "-std=c99 -Werror=implicit-function-declaration ${CMAKE_C_FLAGS}")
ENDIF (NOT WIN32)
IF(CUDA_HAS_FP16 OR NOT ${CUDA_VERSION} LESS 7.5)
  ADD_DEFINITIONS(-DTH_GENERIC_USE_HALF=1)
  ADD_DEFINITIONS(-DCUDA_HAS_FP16=1)
ENDIF()

INCLUDE_DIRECTORIES(${HIP_INCLUDE_DIRECTORIES})
#INCLUDE_DIRECTORIES(${HIP_PATH}/include)
INCLUDE_DIRECTORIES(${HIPBLAS_PATH}/include)
INCLUDE_DIRECTORIES(${HIPRAND_PATH}/include)
INCLUDE_DIRECTORIES(${HIPSPARSE_PATH}/include)

IF (${PLATFORM} MATCHES "hcc")
      include_directories(${CMAKE_CURRENT_SOURCE_DIR}/external/Thrust)
ENDIF()


ADD_SUBDIRECTORY(lib)

INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}/lib/THC")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/lib/THC")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/torch")
LINK_DIRECTORIES("${HIP_PATH}/lib")

SET(src Storage.c init.c Tensor.c TensorMath.c TensorOperator.c torch/utils.c)
SET(luasrc init.lua Tensor.lua FFI.lua test/test.lua)

set(CMAKE_REQUIRED_INCLUDES ${LUA_INCDIR})
include(CheckCSourceCompiles)
check_c_source_compiles("
#include <lauxlib.h>
int main()
{
  long i = sizeof(&luaL_setfuncs);
  return 0;
}
" HAS_LUAL_SETFUNCS)
if(HAS_LUAL_SETFUNCS)
  add_definitions(-DHAS_LUAL_SETFUNCS)
endif()

ADD_HIP_TORCH_WRAP(HipTensormathwrap TensorMath.lua)
ADD_TORCH_PACKAGE(cutorch "${src}" "${luasrc}")

IF(${PLATFORM} MATCHES "hcc") 
    TARGET_LINK_LIBRARIES(cutorch luaT THC hip_hcc) 
    target_compile_options(cutorch PUBLIC -Wall) # TODO: temporary. 
ELSEIF(${PLATFORM} MATCHES "nvcc") 
    TARGET_LINK_LIBRARIES(cutorch luaT THC) 
ENDIF() 

IF(LUALIB)
  TARGET_LINK_LIBRARIES(cutorch ${LUALIB})
ENDIF()
